@model IEnumerable<PetClinicSystem.Models.Prescription>

@{
    ViewData["Title"] = "Prescriptions";
    ViewData["ActivePage"] = "Prescriptions";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-6">
            <h2 class="page-title">
                <i class="fas fa-prescription-bottle-alt me-2"></i>@ViewData["Title"]
                
            </h2>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                    Filter: <span id="filterText">All</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item filter-item" href="#" data-filter="all">All Prescriptions</a></li>
                    <li><a class="dropdown-item filter-item" href="#" data-filter="active">Active Only</a></li>
                    <li><a class="dropdown-item filter-item" href="#" data-filter="dispensed">Dispensed</a></li>
                    <li><a class="dropdown-item filter-item" href="#" data-filter="pending">Pending</a></li>
                </ul>
            </div>
           @*  @if (User.IsInRole("Veterinarian") )
            {
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>New Prescription
                </a>
            } *@
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="prescriptionsTable">
                    <thead>
                        <tr>
                            <th>Medication</th>
                            <th>Patient</th>
                            <th>Prescribed</th>
                            <th>Dosage</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.OrderByDescending(p => p.PrescribedDate))
                        {
                            <tr data-status="@(item.IsDispensed ?? false ? "dispensed" : "pending")"
                                data-active="@(IsPrescriptionActive(item) ? "active" : "inactive")">
                                <td>@item.MedicationName</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(item.Consultation?.Patient?.PhotoPath))
                                        {
                                            <img src="@item.Consultation.Patient.PhotoPath" class="avatar-xs rounded-circle me-2" alt="@item.Consultation.Patient.Name">
                                        }
                                        @item.Consultation?.Patient?.Name
                                    </div>
                                </td>
                                <td>@item.PrescribedDate?.ToString("MMM dd, yyyy")</td>
                                <td>@item.Dosage</td>
                                <td>
                                    <span class="badge bg-@(item.IsDispensed ?? false ? "success" : "warning")">
                                        @(item.IsDispensed ?? false ? "Dispensed" : "Pending")
                                    </span>
                                    @if (IsPrescriptionActive(item))
                                    {
                                        <span class="badge bg-info ms-1">Active</span>
                                    }
                                </td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <a asp-action="Details" asp-route-id="@item.PrescriptionId" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if (User.IsInRole("Veterinarian"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.PrescriptionId" class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button class="btn btn-sm btn-outline-danger delete-btn" data-id="@item.PrescriptionId">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#prescriptionsTable').DataTable({
                responsive: true,
                order: [[2, 'desc']],
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search prescriptions...",
                }
            });
            
            // Filter functionality
            $('.filter-item').click(function(e) {
                e.preventDefault();
                var filter = $(this).data('filter');
                $('#filterText').text($(this).text());
                
                if (filter === 'all') {
                    $('#prescriptionsTable tbody tr').show();
                } else {
                    $('#prescriptionsTable tbody tr').hide();
                    $('#prescriptionsTable tbody tr[data-' + filter + '="' + filter + '"]').show();
                }
            });
            
            // Dispense button handler
            $('.dispense-btn').click(function() {
                var id = $(this).data('id');
                Swal.fire({
                    title: 'Mark as Dispensed?',
                    text: "This will update the prescription status to dispensed.",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, mark as dispensed'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.post('/Prescriptions/Dispense/' + id, function() {
                            Swal.fire(
                                'Dispensed!',
                                'The prescription has been marked as dispensed.',
                                'success'
                            ).then(() => location.reload());
                        }).fail(function() {
                            Swal.fire(
                                'Error!',
                                'Something went wrong.',
                                'error'
                            );
                        });
                    }
                });
            });
        });
    </script>
}

@functions {
    private bool IsPrescriptionActive(Prescription prescription)
    {
        if (!prescription.PrescribedDate.HasValue)
            return false;

        var durationParts = prescription.Duration.Split(' ');
        if (durationParts.Length != 2)
            return false;

        if (!int.TryParse(durationParts[0], out var durationValue))
            return false;

        var endDate = prescription.PrescribedDate.Value;
        
        switch (durationParts[1].ToLower())
        {
            case "day":
            case "days":
                endDate = endDate.AddDays(durationValue);
                break;
            case "week":
            case "weeks":
                endDate = endDate.AddDays(durationValue * 7);
                break;
            case "month":
            case "months":
                endDate = endDate.AddMonths(durationValue);
                break;
            default:
                return false;
        }

        return DateTime.Now <= endDate;
    }
}